// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SCHOOL.Models;

#nullable disable

namespace SCHOOL.Migrations
{
    [DbContext(typeof(SCHOOLContext))]
    partial class SCHOOLContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("SCHOOL.Models.Administrator", b =>
                {
                    b.Property<int>("AdministratorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AdministratorID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdministratorId"), 1L, 1);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Hired")
                        .HasColumnType("bit");

                    b.Property<DateTime>("HiredSinceDate")
                        .HasColumnType("date");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("money");

                    b.Property<int>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("StaffID");

                    b.HasIndex("StaffId");

                    b.ToTable("Administrator", (string)null);
                });

            modelBuilder.Entity("SCHOOL.Models.Class", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClassID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassId"), 1L, 1);

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ClassId");

                    b.ToTable("Class", (string)null);
                });

            modelBuilder.Entity("SCHOOL.Models.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CourseID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"), 1L, 1);

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("HeadTeacherId")
                        .HasColumnType("int")
                        .HasColumnName("HeadTeacherID");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("CourseId");

                    b.HasIndex("HeadTeacherId");

                    b.ToTable("Course", (string)null);
                });

            modelBuilder.Entity("SCHOOL.Models.CourseRecord", b =>
                {
                    b.Property<int>("CourseRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CourseRecordID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseRecordId"), 1L, 1);

                    b.Property<int>("CourseNameId")
                        .HasColumnType("int")
                        .HasColumnName("CourseNameID");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("StudentID");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int")
                        .HasColumnName("TeacherID");

                    b.HasKey("CourseRecordId");

                    b.HasIndex("CourseNameId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("CourseRecords");
                });

            modelBuilder.Entity("SCHOOL.Models.ExtrastudInfo", b =>
                {
                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("GradeValue")
                        .HasColumnType("int");

                    b.Property<string>("Student")
                        .IsRequired()
                        .HasMaxLength(101)
                        .HasColumnType("nvarchar(101)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("StudentID");

                    b.Property<string>("Teacher")
                        .IsRequired()
                        .HasMaxLength(101)
                        .HasColumnType("nvarchar(101)");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int")
                        .HasColumnName("TeacherID");

                    b.ToView("EXTRAstudINFO");
                });

            modelBuilder.Entity("SCHOOL.Models.ExtraTeacher", b =>
                {
                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Teacher")
                        .IsRequired()
                        .HasMaxLength(101)
                        .HasColumnType("nvarchar(101)");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int")
                        .HasColumnName("TeacherID");

                    b.ToView("ExtraTeachers");
                });

            modelBuilder.Entity("SCHOOL.Models.GradeRecord", b =>
                {
                    b.Property<int>("RecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RecordID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecordId"), 1L, 1);

                    b.Property<int>("GradeForStudentId")
                        .HasColumnType("int")
                        .HasColumnName("GradeForStudentID");

                    b.Property<int>("GradeNameId")
                        .HasColumnType("int")
                        .HasColumnName("GradeNameID");

                    b.Property<int>("GradeValue")
                        .HasColumnType("int");

                    b.Property<int>("SetByTeacherId")
                        .HasColumnType("int")
                        .HasColumnName("SetByTeacherID");

                    b.Property<DateTime>("SetDate")
                        .HasColumnType("date");

                    b.HasKey("RecordId")
                        .HasName("PK__GradeRec__FBDF78C9CF9A1EC3");

                    b.HasIndex("GradeForStudentId");

                    b.HasIndex("GradeNameId");

                    b.HasIndex("SetByTeacherId");

                    b.ToTable("GradeRecords");
                });

            modelBuilder.Entity("SCHOOL.Models.Principal", b =>
                {
                    b.Property<int>("PrincipalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PrincipalID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrincipalId"), 1L, 1);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Hired")
                        .HasColumnType("bit");

                    b.Property<DateTime>("HiredSinceDate")
                        .HasColumnType("date");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("money");

                    b.Property<int>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("StaffID");

                    b.HasKey("PrincipalId");

                    b.HasIndex("StaffId");

                    b.ToTable("Principal", (string)null);
                });

            modelBuilder.Entity("SCHOOL.Models.staff", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StaffID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffId"), 1L, 1);

                    b.Property<bool>("Hired")
                        .HasColumnType("bit");

                    b.Property<string>("StaffRole")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("StaffId");

                    b.ToTable("Staff", (string)null);
                });

            modelBuilder.Entity("SCHOOL.Models.StaffOverView", b =>
                {
                    b.Property<DateTime?>("AHiredDate")
                        .HasColumnType("date")
                        .HasColumnName("A. Hired Date");

                    b.Property<string>("Admins")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("PHiredDate")
                        .HasColumnType("date")
                        .HasColumnName("P. Hired Date");

                    b.Property<string>("Principals")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("THiredDate")
                        .HasColumnType("date")
                        .HasColumnName("T. Hired Date");

                    b.Property<string>("Teachers")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToView("StaffOverView");
                });

            modelBuilder.Entity("SCHOOL.Models.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StudentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentId"), 1L, 1);

                    b.Property<int>("ClassId")
                        .HasColumnType("int")
                        .HasColumnName("ClassID");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LastNAme");

                    b.HasKey("StudentId");

                    b.HasIndex("ClassId");

                    b.ToTable("Student", (string)null);
                });

            modelBuilder.Entity("SCHOOL.Models.Teacher", b =>
                {
                    b.Property<int>("TeacherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TeacherID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeacherId"), 1L, 1);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Hired")
                        .HasColumnType("bit");

                    b.Property<DateTime>("HiredSinceDate")
                        .HasColumnType("date");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("money");

                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StaffID")
                        .HasDefaultValueSql("('Teacher')");

                    b.HasKey("TeacherId");

                    b.HasIndex("StaffId");

                    b.ToTable("Teacher", (string)null);
                });

            modelBuilder.Entity("SCHOOL.Models.VavgSal", b =>
                {
                    b.Property<decimal?>("TotalSalaryForAllAdministrators")
                        .HasColumnType("money")
                        .HasColumnName("Total salary for all Administrators");

                    b.Property<decimal?>("TotalSalaryForAllPrincipals")
                        .HasColumnType("money")
                        .HasColumnName("Total salary for all Principals");

                    b.Property<decimal?>("TotalSalaryForAllTeachers")
                        .HasColumnType("money")
                        .HasColumnName("Total salary for all teachers");

                    b.ToView("VavgSal");
                });

            modelBuilder.Entity("SCHOOL.Models.ViewStaffOverView", b =>
                {
                    b.Property<DateTime?>("AHiredDate")
                        .HasColumnType("date")
                        .HasColumnName("A. Hired Date");

                    b.Property<string>("Admins")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("PHiredDate")
                        .HasColumnType("date")
                        .HasColumnName("P. Hired Date");

                    b.Property<string>("Principals")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("THiredDate")
                        .HasColumnType("date")
                        .HasColumnName("T. Hired Date");

                    b.Property<string>("Teachers")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToView("ViewStaffOverView");
                });

            modelBuilder.Entity("SCHOOL.Models.ViewSumSal", b =>
                {
                    b.Property<decimal?>("AverageSalaryForAdministrator")
                        .HasColumnType("money")
                        .HasColumnName("Average salary for Administrator");

                    b.Property<decimal?>("AverageSalaryForPrincipals")
                        .HasColumnType("money")
                        .HasColumnName("Average salary for Principals");

                    b.Property<decimal?>("AverageSalaryForTeachers")
                        .HasColumnType("money")
                        .HasColumnName("Average salary for teachers");

                    b.ToView("ViewSumSal");
                });

            modelBuilder.Entity("SCHOOL.Models.Administrator", b =>
                {
                    b.HasOne("SCHOOL.Models.staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .IsRequired()
                        .HasConstraintName("FK_Administrator_Staff");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("SCHOOL.Models.Course", b =>
                {
                    b.HasOne("SCHOOL.Models.Teacher", "HeadTeacher")
                        .WithMany("Courses")
                        .HasForeignKey("HeadTeacherId")
                        .IsRequired()
                        .HasConstraintName("FK_Course_Teacher");

                    b.Navigation("HeadTeacher");
                });

            modelBuilder.Entity("SCHOOL.Models.CourseRecord", b =>
                {
                    b.HasOne("SCHOOL.Models.Course", "CourseName")
                        .WithMany("CourseRecords")
                        .HasForeignKey("CourseNameId")
                        .IsRequired()
                        .HasConstraintName("FK_CourseRecords_Course1");

                    b.HasOne("SCHOOL.Models.Student", "Student")
                        .WithMany("CourseRecords")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK_CourseRecords_Student1");

                    b.HasOne("SCHOOL.Models.Teacher", "Teacher")
                        .WithMany("CourseRecords")
                        .HasForeignKey("TeacherId")
                        .IsRequired()
                        .HasConstraintName("FK_CourseRecords_Teacher1");

                    b.Navigation("CourseName");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SCHOOL.Models.GradeRecord", b =>
                {
                    b.HasOne("SCHOOL.Models.Student", "GradeForStudent")
                        .WithMany("GradeRecords")
                        .HasForeignKey("GradeForStudentId")
                        .IsRequired()
                        .HasConstraintName("FK_GradeRecords_Student1");

                    b.HasOne("SCHOOL.Models.Course", "GradeName")
                        .WithMany("GradeRecords")
                        .HasForeignKey("GradeNameId")
                        .IsRequired()
                        .HasConstraintName("FK_GradeRecords_Course");

                    b.HasOne("SCHOOL.Models.Teacher", "SetByTeacher")
                        .WithMany("GradeRecords")
                        .HasForeignKey("SetByTeacherId")
                        .IsRequired()
                        .HasConstraintName("FK_GradeRecords_Teacher");

                    b.Navigation("GradeForStudent");

                    b.Navigation("GradeName");

                    b.Navigation("SetByTeacher");
                });

            modelBuilder.Entity("SCHOOL.Models.Principal", b =>
                {
                    b.HasOne("SCHOOL.Models.staff", "Staff")
                        .WithMany("Principals")
                        .HasForeignKey("StaffId")
                        .IsRequired()
                        .HasConstraintName("FK_Principal_Staff");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("SCHOOL.Models.Student", b =>
                {
                    b.HasOne("SCHOOL.Models.Class", "Class")
                        .WithMany("Students")
                        .HasForeignKey("ClassId")
                        .IsRequired()
                        .HasConstraintName("FK_Student_Class");

                    b.Navigation("Class");
                });

            modelBuilder.Entity("SCHOOL.Models.Teacher", b =>
                {
                    b.HasOne("SCHOOL.Models.staff", "Staff")
                        .WithMany("Teachers")
                        .HasForeignKey("StaffId")
                        .IsRequired()
                        .HasConstraintName("FK_Teacher_Staff");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("SCHOOL.Models.Class", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("SCHOOL.Models.Course", b =>
                {
                    b.Navigation("CourseRecords");

                    b.Navigation("GradeRecords");
                });

            modelBuilder.Entity("SCHOOL.Models.staff", b =>
                {
                    b.Navigation("Principals");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("SCHOOL.Models.Student", b =>
                {
                    b.Navigation("CourseRecords");

                    b.Navigation("GradeRecords");
                });

            modelBuilder.Entity("SCHOOL.Models.Teacher", b =>
                {
                    b.Navigation("CourseRecords");

                    b.Navigation("Courses");

                    b.Navigation("GradeRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
